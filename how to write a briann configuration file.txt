# How to write a BrIANN configuration file

- The file is written in JSON format

## Connections
Specify a list of connection data entries using the key "connections"

## Area
Specify a list of area data entries using the key "areas". There should be a single source area, a single target area and an arbitrary number of regular areas.
- The source area is a special area whose "index" parameter has to be set to 0 and whose only other parameters are the "update_rate" and the "hold_function" (optional, see SourceArea documentation).
- The target area is a special area whose "index" parameter has to be the largest among all indices in the list of areas. The target area furthermore needs all parameters that a regular area needs (see below), except for the "transformation" parameter. That one will be ignored by the parser.
- Any regular area needs to have the following parameters:
    - "index": The index of the area. This should be a unique integer in the range from 0 to n-1, where n is the number of areas including the source and target. 
    - "initial_state": A string of python code that, once executed, gives the initial state for a single instance, e.g. "torch.zeros(3)".
    - "transformation": A string of python code that, once executed, gives the the transformation that should be applied to all instances at each step of the area. This can set up by simply calling the constructor of a custom torch.nn.Module that is specified in the components.py file, e.g. "TimeAverageThenStateConcatenateThenTransformLinear(input_dimensionality=5, output_dimensionality=3)".
    - "update_rate": A float indicating the rate at which the area shall process its inputs, given in Hz.

## Further BrIANN parameters
Next to the connections and areas, the BrIANN model takes the following parameters:
- "cool_down_duration": BrIANN propagates the input through the network. Once the source area reaches the last time frame from the input, it will hold the signal according to the hold_function such that the remaining areas can still finish their processes. The amount of time in seconds for which the simulation shall still run is specified by this cool_down_duration parameter.  
